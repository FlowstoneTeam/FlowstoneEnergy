Block class:

	public IIcon[] iconList;

	@Override
	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister par1IconRegister) {
		iconList = new IIcon[metaList.length];
		iconList[0] = par1IconRegister.registerIcon(Constants.MOD_ID + ":"
				+ "crystalline");
		iconList[1] = par1IconRegister.registerIcon(Constants.MOD_ID + ":"
				+ "crystal");
		iconList[2] = par1IconRegister.registerIcon(Constants.MOD_ID + ":"
				+ "crystalline_light");
	}

	@Override
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int par1, int par2) {
		int idx = MathHelper.clamp_int(par2, 0, iconList.length - 1);
		return iconList[idx];
	}

Tile Entity class:

	@Override
	public final Packet getDescriptionPacket() {
		NBTTagCompound nbt = new NBTTagCompound();
		writePropertiesToNBT(nbt);

		S35PacketUpdateTileEntity packet = new S35PacketUpdateTileEntity(xCoord, yCoord, zCoord, 0, nbt);

		return packet;
	}
	
	@Override
	public void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt) {
		NBTTagCompound nbt = pkt.func_148857_g();

		readPropertiesFromNBT(nbt);
	}

	Update in TileEntity:
	(Sorry, missed someting..)

	@Override
	public void markDirty() {
		super.markDirty(); // Mark dirty for gamesave
		if (worldObj.isRemote) {
			return;
		}
		this.worldObj.markBlockForUpdate(xCoord, yCoord, zCoord); // Update block + TE via Network
	}